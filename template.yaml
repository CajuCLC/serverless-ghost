AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabasePassword:
    Type: String
    Default: password12345
    NoEcho: true
  DomainName:
    Type: String
  SentryDsn:
    Type: String
    Description: Send errors to sentry?
    Default: ''
    NoEcho: true
  Memory:
    Type: Number
    MinValue: 1024
    MaxValue: 3008
    Default: 1024
    Description: 1024 MB is a reasonable balance between performance and price. Less than that will result in poor cold starts.
  SesSmtpPassword:
    Type: String
    Default: ''
    Description: SES secret access key. See README.md on an easy way to get it
    NoEcho: true

Mappings:
  Constants:
    Values:
      ContentPath: /mnt/content
      DatabaseName: ghost
      DatabaseUser: dbadmin

Resources:
  Fn:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTarget1
      - MountTarget2
    Properties:
      CodeUri: ./src.zip
      Environment:
        Variables:
          DEBUG: '*'
          database__client: mysql
          paths__contentPath: !FindInMap [Constants, Values, ContentPath]
          database__connection__host: !GetAtt Db.Endpoint.Address
          database__connection__database: !FindInMap [Constants, Values, DatabaseName]
          database__connection__user: !FindInMap [Constants, Values, DatabaseUser]
          database__connection__password: !Ref DatabasePassword
          logging__level: debug
          mail__from: !Sub admin@${DomainName}
          mail__options__auth__pass: !Ref SesSmtpPassword
          mail__options__auth__user: !Ref AccessKey
          mail__options__host: email-smtp.us-east-1.amazonaws.com
          mail__options__port: 465
          mail__options__service: SES
          mail__transport: SMTP
          paths__appRoot: /var/task
          sentry__dsn: !Ref SentryDsn
          url: !Sub https://${DomainName}
      FileSystemConfigs:
        - Arn: !GetAtt ContentAp.Arn
          LocalMountPath: !FindInMap [Constants, Values, ContentPath]
      Handler: index.handler
      Layers:
        - !Ref NodeModules
      MemorySize: !Ref Memory
      Runtime: nodejs12.x
      VpcConfig:
        SecurityGroupIds:
          - !Ref Sg
        SubnetIds:
          - !GetAtt Vpc.Outputs.privateSubnet1ID
          - !GetAtt Vpc.Outputs.privateSubnet2ID
      Timeout: 120

  RootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Fn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/

  ProxyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Fn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*

  Api:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes: ['*~1*']
      DefinitionBody:
        info:
          version: '1.0'
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations'
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations'
        swagger: '2.0'
      Domain:
        CertificateArn: !Ref Certificate
        DomainName: !Ref DomainName
      StageName: Prod

  NodeModules:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      ContentUri: ./node-modules.zip

  Certificate:
    Properties:
      DomainName: !Sub '*.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Sub '*.${DomainName}'
          ValidationDomain: !Sub '*.${DomainName}'
        - DomainName: !Ref DomainName
          ValidationDomain: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
        - !Ref DomainName
      ValidationMethod: DNS
    Type: AWS::CertificateManager::Certificate

  Disk:
    Type: AWS::EFS::FileSystem

  ContentAp:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref Disk
      PosixUser:
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '0777'
        Path: /ghost/content

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Disk
      SubnetId: !GetAtt Vpc.Outputs.privateSubnet1ID
      SecurityGroups: [!Ref Sg]

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Disk
      SubnetId: !GetAtt Vpc.Outputs.privateSubnet2ID
      SecurityGroups: [!Ref Sg]

  Db:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    Properties:
      DatabaseName: !FindInMap [Constants, Values, DatabaseName]
      DBSubnetGroupName: !Ref SubnetGroup
      EnableHttpEndpoint: true
      Engine: aurora
      EngineMode: serverless
      MasterUsername: !FindInMap [Constants, Values, DatabaseUser]
      MasterUserPassword: !Ref DatabasePassword
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 1
        MaxCapacity: 2
        SecondsUntilAutoPause: 3600
      VpcSecurityGroupIds:
        - !Ref Sg

  Sg:
    Properties:
      GroupDescription: ghost security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
        - CidrIpv6: ::/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
        - CidrIpv6: ::/0
          IpProtocol: '-1'
      VpcId: !GetAtt Vpc.Outputs.pubPrivateVPCID
    Type: AWS::EC2::SecurityGroup

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: ghost blog subnet group
      DBSubnetGroupName: !Sub ${AWS::StackName}-subnet-group
      SubnetIds:
        - !GetAtt Vpc.Outputs.privateSubnet1ID
        - !GetAtt Vpc.Outputs.privateSubnet2ID

  User:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ses:SendRawEmail
                Resource: '*'
          PolicyName: ghost-send-email

  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User

  Vpc:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc-privatepublic.yaml

Outputs:
#  SecretAccessKey:
#    Value: !GetAtt AccessKey.SecretAccessKey
#    Description: Used to derive SES smtp password
  PingUrl:
    Value: !Sub https://${DomainName}/ghost/api/v3/admin/site/
    Description: Please hit only this url to let ghost start initialisation
  WebsiteDns:
    Value: !GetAtt Api.DomainName.RegionalDomainName
    Description: Put this value as CNAME for your domain
